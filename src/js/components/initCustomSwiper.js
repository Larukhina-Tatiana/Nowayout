import Swiper from "swiper";
import { Navigation } from "swiper/modules";

import "swiper/css";
import "swiper/css/navigation";

let swipers = {}; // –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ Swiper

// üï∞ Debounce
function debounce(func, wait) {
  let timeout;
  return function (...args) {
    clearTimeout(timeout);
    timeout = setTimeout(() => func.apply(this, args), wait);
  };
}

// üìê –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —ç–∫—Ä–∞–Ω–∞
function getScreenProfile() {
  const isLandscape = window.matchMedia("(orientation: landscape)").matches;
  const width = window.innerWidth;

  return {
    isLandscape,
    width,
    isMobileLandscape: width <= 425 && isLandscape,
    canInitSwiper: width > 425 || (isLandscape && width > 375),
  };
}

// ‚èØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏
function updateNavState(swiper, prevEl, nextEl) {
  if (!swiper) return;
  prevEl?.classList.toggle("hidden", swiper.isBeginning);
  nextEl?.classList.toggle("hidden", swiper.isEnd);
}

/**
 * üéØ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Swiper
 * @param {Object} options - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
 * @param {string} options.containerSelector - —Å–µ–ª–µ–∫—Ç–æ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ swiper
 * @param {string} options.prevSelector - —Å–µ–ª–µ–∫—Ç–æ—Ä –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
 * @param {string} options.nextSelector - —Å–µ–ª–µ–∫—Ç–æ—Ä –∫–Ω–æ–ø–∫–∏ "–≤–ø–µ—Ä—ë–¥"
 * @param {string} [options.id] - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ swiper
 * @param {Function} [options.onReady] - –∫–æ–ª–±—ç–∫ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
 */
export function initCustomSwiper({
  containerSelector,
  prevSelector,
  nextSelector,
  id = containerSelector,
  onReady,
}) {
  const container = document.querySelector(containerSelector);
  const wrapper = container?.querySelector(".swiper-wrapper");
  const prevEl = document.querySelector(prevSelector);
  const nextEl = document.querySelector(nextSelector);

  // if (!container || !wrapper || !prevEl || !nextEl) return;
  if (!container || !wrapper || !prevEl || !nextEl) {
    console.warn(`[Swiper] –ù–µ –Ω–∞–π–¥–µ–Ω –æ–¥–∏–Ω –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:`, {
      container,
      wrapper,
      prevEl,
      nextEl,
    });
    return;
  }

  const profile = getScreenProfile();
  if (!profile.canInitSwiper) {
    prevEl.classList.add("hidden");
    nextEl.classList.add("hidden");
    wrapper.style.transform = "none";
    return;
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
  if (swipers[id]) {
    swipers[id].destroy(true, true);
    swipers[id] = null;
  }

  const swiper = new Swiper(container, {
    modules: [Navigation],
    slidesPerView: "auto",
    spaceBetween: 12,
    // allowTouchMove: window.innerWidth > 480,
    allowTouchMove: profile.width > 480,
    navigation: {
      nextEl,
      prevEl,
    },
    on: {
      afterInit(swiper) {
        swiper.update();
        swiper.slideTo(0, 0);
        updateNavState(swiper, prevEl, nextEl);
        if (typeof onReady === "function") onReady(swiper);
      },
      slideChange: () => updateNavState(swiper, prevEl, nextEl),
      resize: () => updateNavState(swiper, prevEl, nextEl),
      reachBeginning: () => updateNavState(swiper, prevEl, nextEl),
      reachEnd: () => updateNavState(swiper, prevEl, nextEl),
      fromEdge: () => updateNavState(swiper, prevEl, nextEl),
    },
  });

  swipers[id] = swiper;

  setTimeout(() => {
    swiper.update();
    updateNavState(swiper, prevEl, nextEl);
  }, 0);
}
